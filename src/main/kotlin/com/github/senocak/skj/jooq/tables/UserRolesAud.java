/*
 * This file is generated by jOOQ.
 */
package com.github.senocak.skj.jooq.tables;


import com.github.senocak.skj.jooq.Keys;
import com.github.senocak.skj.jooq.Public;
import com.github.senocak.skj.jooq.tables.records.UserRolesAudRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRolesAud extends TableImpl<UserRolesAudRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_roles_aud</code>
     */
    public static final UserRolesAud USER_ROLES_AUD = new UserRolesAud();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRolesAudRecord> getRecordType() {
        return UserRolesAudRecord.class;
    }

    /**
     * The column <code>public.user_roles_aud.rev</code>.
     */
    public final TableField<UserRolesAudRecord, Integer> REV = createField(DSL.name("rev"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_roles_aud.revtype</code>.
     */
    public final TableField<UserRolesAudRecord, Short> REVTYPE = createField(DSL.name("revtype"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.user_roles_aud.role_id</code>.
     */
    public final TableField<UserRolesAudRecord, UUID> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_roles_aud.user_id</code>.
     */
    public final TableField<UserRolesAudRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    private UserRolesAud(Name alias, Table<UserRolesAudRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserRolesAud(Name alias, Table<UserRolesAudRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_roles_aud</code> table reference
     */
    public UserRolesAud(String alias) {
        this(DSL.name(alias), USER_ROLES_AUD);
    }

    /**
     * Create an aliased <code>public.user_roles_aud</code> table reference
     */
    public UserRolesAud(Name alias) {
        this(alias, USER_ROLES_AUD);
    }

    /**
     * Create a <code>public.user_roles_aud</code> table reference
     */
    public UserRolesAud() {
        this(DSL.name("user_roles_aud"), null);
    }

    public <O extends Record> UserRolesAud(Table<O> child, ForeignKey<O, UserRolesAudRecord> key) {
        super(child, key, USER_ROLES_AUD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserRolesAudRecord> getPrimaryKey() {
        return Keys.USER_ROLES_AUD_PKEY;
    }

    @Override
    public List<ForeignKey<UserRolesAudRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_ROLES_AUD__FK_USER_ROLES_AUDIT_REV);
    }

    private transient AuditRevisionEntity _auditRevisionEntity;

    /**
     * Get the implicit join path to the
     * <code>public.audit_revision_entity</code> table.
     */
    public AuditRevisionEntity auditRevisionEntity() {
        if (_auditRevisionEntity == null)
            _auditRevisionEntity = new AuditRevisionEntity(this, Keys.USER_ROLES_AUD__FK_USER_ROLES_AUDIT_REV);

        return _auditRevisionEntity;
    }

    @Override
    public UserRolesAud as(String alias) {
        return new UserRolesAud(DSL.name(alias), this);
    }

    @Override
    public UserRolesAud as(Name alias) {
        return new UserRolesAud(alias, this);
    }

    @Override
    public UserRolesAud as(Table<?> alias) {
        return new UserRolesAud(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRolesAud rename(String name) {
        return new UserRolesAud(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRolesAud rename(Name name) {
        return new UserRolesAud(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRolesAud rename(Table<?> name) {
        return new UserRolesAud(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Short, UUID, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Short, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Short, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
