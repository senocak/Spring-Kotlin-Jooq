/*
 * This file is generated by jOOQ.
 */
package com.github.senocak.skj.jooq.tables;


import com.github.senocak.skj.jooq.Keys;
import com.github.senocak.skj.jooq.Public;
import com.github.senocak.skj.jooq.tables.records.AuditRevisionEntityRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditRevisionEntity extends TableImpl<AuditRevisionEntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.audit_revision_entity</code>
     */
    public static final AuditRevisionEntity AUDIT_REVISION_ENTITY = new AuditRevisionEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditRevisionEntityRecord> getRecordType() {
        return AuditRevisionEntityRecord.class;
    }

    /**
     * The column <code>public.audit_revision_entity.id</code>.
     */
    public final TableField<AuditRevisionEntityRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.audit_revision_entity.timestamp</code>.
     */
    public final TableField<AuditRevisionEntityRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.audit_revision_entity.updated_at</code>.
     */
    public final TableField<AuditRevisionEntityRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private AuditRevisionEntity(Name alias, Table<AuditRevisionEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditRevisionEntity(Name alias, Table<AuditRevisionEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.audit_revision_entity</code> table
     * reference
     */
    public AuditRevisionEntity(String alias) {
        this(DSL.name(alias), AUDIT_REVISION_ENTITY);
    }

    /**
     * Create an aliased <code>public.audit_revision_entity</code> table
     * reference
     */
    public AuditRevisionEntity(Name alias) {
        this(alias, AUDIT_REVISION_ENTITY);
    }

    /**
     * Create a <code>public.audit_revision_entity</code> table reference
     */
    public AuditRevisionEntity() {
        this(DSL.name("audit_revision_entity"), null);
    }

    public <O extends Record> AuditRevisionEntity(Table<O> child, ForeignKey<O, AuditRevisionEntityRecord> key) {
        super(child, key, AUDIT_REVISION_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AuditRevisionEntityRecord> getPrimaryKey() {
        return Keys.AUDIT_REVISION_ENTITY_PKEY;
    }

    @Override
    public AuditRevisionEntity as(String alias) {
        return new AuditRevisionEntity(DSL.name(alias), this);
    }

    @Override
    public AuditRevisionEntity as(Name alias) {
        return new AuditRevisionEntity(alias, this);
    }

    @Override
    public AuditRevisionEntity as(Table<?> alias) {
        return new AuditRevisionEntity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditRevisionEntity rename(String name) {
        return new AuditRevisionEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditRevisionEntity rename(Name name) {
        return new AuditRevisionEntity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditRevisionEntity rename(Table<?> name) {
        return new AuditRevisionEntity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Long, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
